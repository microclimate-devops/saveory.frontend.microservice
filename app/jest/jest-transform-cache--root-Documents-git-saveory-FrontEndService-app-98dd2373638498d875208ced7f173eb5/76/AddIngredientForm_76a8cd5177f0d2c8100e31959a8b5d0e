/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/root/Documents/git/saveory/FrontEndService/app/src/components/AddIngredientForm.js';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_propTypes = require('prop-types'); /* istanbul ignore next */var _propTypes2 = _interopRequireDefault(_propTypes);
var /* istanbul ignore next */_carbonComponentsReact = require('carbon-components-react');
var /* istanbul ignore next */_CarbonFormInput = require('./carbon/CarbonFormInput.js'); /* istanbul ignore next */var _CarbonFormInput2 = _interopRequireDefault(_CarbonFormInput);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

AddIngredientForm = function (_Component) {_inherits(AddIngredientForm, _Component);
	function /* istanbul ignore next */AddIngredientForm(props) {/* istanbul ignore next */_classCallCheck(this, AddIngredientForm);var _this = _possibleConstructorReturn(this, (AddIngredientForm.__proto__ || Object.getPrototypeOf(AddIngredientForm)).call(this,
		props));
		/* istanbul ignore next */_this.inputChange = /* istanbul ignore next */_this.inputChange.bind( /* istanbul ignore next */_this); /* istanbul ignore next */return _this;
	}_createClass(AddIngredientForm, [{ key: 'inputChange', value: function inputChange(









		target) {
			//get selector 
			var targetIndex = Number(target.getAttribute('id'));
			var selector = this.props.ingredientFields[targetIndex];
			//convert to number if the field specifies it should be
			var value = this.props.ingredientFieldTypes[targetIndex] === "number" ? Number(target.value) : target.value;

			this.props.onChange(selector, value);
		} }, { key: 'showInputs', value: function showInputs()

		{
			var ingredientFields = this.props.ingredientFields;
			var ingredientFieldTypes = this.props.ingredientFieldTypes;

			var inputs = [];
			var currInput = undefined;
			var currSelector = undefined;
			var currValue = undefined;
			var currValidateData = undefined;

			//Use the ingredient metadata to determine input fields and types
			for (var i = 0; i < ingredientFields.length; i++) {
				//Gather data about the field
				currSelector = ingredientFields[i];
				currValue = this.props.ingredient[currSelector];
				//try to get validate data, default if not there
				currValidateData = this.props.validateData[currSelector] || {};

				currInput = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CarbonFormInput2.default, /* istanbul ignore next */{ key: currSelector, inputData: currValue, inputType: ingredientFieldTypes[i], inputID: i, inputLabel: currSelector, onChange: this.inputChange, invalidText: currValidateData.msg, isInvalid: !currValidateData.valid, className: 'add-ingredient-form-item', __source: { fileName: _jsxFileName, lineNumber: 48 }, __self: this });

				//Add the input to list
				inputs.push(currInput);
			}

			return inputs;
		} }, { key: 'render', value: function render()

		{
			return (
				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'add-ingredient-form-container', __source: { fileName: _jsxFileName, lineNumber: 59 }, __self: this },
					this.showInputs()));


		} }]);return AddIngredientForm;}(_react.Component); /* istanbul ignore next */AddIngredientForm.PropTypes = { onChange: /* istanbul ignore next */_propTypes2.default.func.isRequired, ingredient: /* istanbul ignore next */_propTypes2.default.object.isRequired, ingredientFields: /* istanbul ignore next */_propTypes2.default.array.isRequired, ingredientFieldTypes: /* istanbul ignore next */_propTypes2.default.array.isRequired, validateData: /* istanbul ignore next */_propTypes2.default.object.isRequired }; /* istanbul ignore next */exports.default =


AddIngredientForm;